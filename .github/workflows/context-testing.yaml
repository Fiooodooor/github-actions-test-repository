name: Context testing
on:
  push:
  pull_request:
  workflow_call:
  workflow_dispatch:

permissions:
  contents: read

env:
  BUILD_TYPE: "Release"
  DOCKER_IMAGE_NAME: "ghcr.io/openvisualcloud/intel-tiber-broadcast-suite/tiber-broadcast-suite"
  DOCKER_IMAGE_TAG: "${{ github.sha }}"
  DEBIAN_FRONTEND: "noninteractive"
  TRIVY_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-db"
  TRIVY_JAVA_DB_REPOSITORY: "public.ecr.aws/aquasecurity/trivy-java-db"
  DOCKER_TMPDIR: "/mnt/docker/docker-tmp"

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  dump_contexts_to_log:
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    permissions:
      contents: read
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"

      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"

      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"

      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"

      - name: Dump matrix context
        continue-on-error: true
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix || '{}') }}
        run: echo "$MATRIX_CONTEXT"

  docker:
    name: "Dockerfile build"
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    permissions:
      contents: read
    env:
      ACTIONS_STEP_DEBUG: true
      BUILDKIT_STEP_LOG_MAX_SIZE: 50000000
      BUILDKIT_STEP_LOG_MAX_SPEED: 10000000
    steps:
    - name: "Preparation: Harden Runner"
      uses: step-security/harden-runner@17d0e2bd7d51742c71671bd19fa12bdc9d40a3d6 # v2.8.1
      with:
        egress-policy: audit

    - name: "Memory and swap report before"
      run: |
        sudo free -h
        sudo lsblk
        sudo df -h

    - name: "Set swap to 30Gi"
      shell: bash
      run: |
        export SWAP_FILE=$(sudo swapon --show=NAME | tail -n 1)
        sudo swapoff $SWAP_FILE
        sudo rm $SWAP_FILE

    - name: "Memory and swap report after"
      run: |
        sudo free -h
        sudo lsblk
        sudo df -h

    - name: "ls /root/.docker"
      run: |
        sudo ls -la /root/.docker
        sudo cat /root/.docker/config.json
    
    - name: "ls ~/.docker"
      run: |
        sudo ls -la ~/.docker
        sudo cat ~/.docker/config.json

    - name: "ls /etc/docker/daemon.json"
      run: |
        sudo ls -la /etc/docker/
        sudo cat /etc/docker/daemon.json

    - name: "sudo echo jq '.' /etc/docker/daemon.json"
      run: |
        sudo mkdir -p /mnt/docker/docker-d /mnt/docker/docker-tmp
        sudo chmod 666 /etc/docker/daemon.json
        sudo cat /etc/docker/daemon.json
        echo "$(sudo jq '. += {"data-root":"/mnt/docker/docker-d","log-driver":"json-file","log-format":"text","log-level":"info","log-opts":{"cache-disabled":"false","cache-max-file":"5","cache-max-size":"20m","max-file":"5","max-size":"10m"}}' /etc/docker/daemon.json)" > /etc/docker/daemon.json
        sudo cat /etc/docker/daemon.json
        sudo chmod 644 /etc/docker/daemon.json
        echo 'sudo daemon reload'
        sudo systemctl daemon-reload
        echo 'sudo restart docker'
        sudo systemctl restart docker
        
    - name: "Configuration: Docker with Buildx Toolkit set up"
      uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
      with:
        buildkitd-flags: --debug
        platforms: linux/amd64
        driver-opts: memory=14Gib,memory-swap=25Gib,env.BUILDKIT_STEP_LOG_MAX_SIZE=50000000,env.BUILDKIT_STEP_LOG_MAX_SPEED=10000000

    - name: "Memory and swap report after"
      run: |
        sudo free -h
        sudo df -h
        sudo lsblk

    - name: "Validation: Build/Push Dokcerfile"
      uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25 # v5.4.0
      with:
        file: tiber/Dockerfile
        push: false
        load: true
        target: final-stage
        tags: "${{ env.DOCKER_IMAGE_BASE }}/${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_IMAGE_TAG }}"
        outputs: type=docker
        platforms: "linux/amd64"
        cache-from: type=gha,scope=${{ env.DOCKER_IMAGE_NAME }}
        cache-to: type=gha,mode=max,scope=${{ env.DOCKER_IMAGE_NAME }}

